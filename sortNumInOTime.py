# Given a list of numbers with only 3 unique numbers (1, 2, 3), sort the list in O(n) time.

def sortMid(arr):
    if arr[0] > arr[1]:
        arr[0], arr[1] = arr[1], arr[0]
    if arr[1] > arr[2]:
        arr[1], arr[2] = arr[2], arr[1]
    if arr[0] > arr[1]:
        arr[0], arr[1] = arr[1], arr[0]
    return arr[1]

def findMidValue(arr):
    i = 0
    valueArray = [arr[0], 0, 0]
    while i < len(arr):
        if arr[i] != valueArray[0] and valueArray[1] and arr[i] != valueArray[1] :
            valueArray[2] = arr[i]
            return sortMid(valueArray)
        if arr[i] != valueArray[0] and not valueArray[1]:
            valueArray[1] = arr[i]
        i += 1
    return -1

def sortNums(arr):
    mid = findMidValue(arr)     # could replace the first 2 fonctions if we write mid = 2 
    if mid == -1:               # but I prefered it to work for any 3 nums.
        return "Didnt find 3 different values"
    i = 0
    l = len(arr) - 1
    midIndex = 0
    while i <= l:
        if arr[i] > mid:
            arr[i], arr[l] = arr[l], arr[i]
            l -= 1
        elif arr[i] < mid:
            arr[i], arr[midIndex] = arr[midIndex], arr[i]
            i += 1
            midIndex += 1
        else:
            i += 1
    return arr
            
            

myArray = [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 3, 3, 3]

myArray2 = [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, \
    1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, \
    1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3,     \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,        \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1,        \
    1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1,  \
    1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3,  \
    1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3,  \
    3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
    3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2,  \
    3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2,  \
    2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,  \
    2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1,  \
    1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3,  \
        ]

print (sortNums(myArray2))
''' OLD CODE ATTEMPS with a mid index only, not working

def sortNums(arr):
    resultArray = [arr[0]]
    i = 1
    middle = 0
    flag = 0
    while i < len(arr):
        if arr[i] > resultArray[middle]:
            resultArray.insert(middle + 1, arr[i])
        elif arr[i] < resultArray[middle]:
            resultArray.insert(0, arr[i])
            if resultArray[middle] == resultArray[0] and flag: #and resultArray[middle] < resultArray[i] and flag:
                middle += 1
            elif resultArray[middle] == resultArray[0]:
                flag = 1
                print "flag upped"
        elif arr[i] == resultArray[middle]:
            resultArray.insert(middle, arr[i])
            if flag:
                middle += 1
        
        print 'New number : ' + str(arr[i]) + "  value of middle : " + str(middle)
        i += 1
        print resultArray
        print ""
    return resultArray
'''
